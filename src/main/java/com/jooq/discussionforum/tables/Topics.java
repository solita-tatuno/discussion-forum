/*
 * This file is generated by jOOQ.
 */
package com.jooq.discussionforum.tables;


import com.jooq.discussionforum.Keys;
import com.jooq.discussionforum.Public;
import com.jooq.discussionforum.tables.Messages.MessagesPath;
import com.jooq.discussionforum.tables.Users.UsersPath;
import com.jooq.discussionforum.tables.records.TopicsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Topics extends TableImpl<TopicsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.topics</code>
     */
    public static final Topics TOPICS = new Topics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TopicsRecord> getRecordType() {
        return TopicsRecord.class;
    }

    /**
     * The column <code>public.topics.id</code>.
     */
    public final TableField<TopicsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.topics.user_id</code>.
     */
    public final TableField<TopicsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.topics.name</code>.
     */
    public final TableField<TopicsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.topics.created_at</code>.
     */
    public final TableField<TopicsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.topics.updated_at</code>.
     */
    public final TableField<TopicsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Topics(Name alias, Table<TopicsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Topics(Name alias, Table<TopicsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.topics</code> table reference
     */
    public Topics(String alias) {
        this(DSL.name(alias), TOPICS);
    }

    /**
     * Create an aliased <code>public.topics</code> table reference
     */
    public Topics(Name alias) {
        this(alias, TOPICS);
    }

    /**
     * Create a <code>public.topics</code> table reference
     */
    public Topics() {
        this(DSL.name("topics"), null);
    }

    public <O extends Record> Topics(Table<O> path, ForeignKey<O, TopicsRecord> childPath, InverseForeignKey<O, TopicsRecord> parentPath) {
        super(path, childPath, parentPath, TOPICS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TopicsPath extends Topics implements Path<TopicsRecord> {
        public <O extends Record> TopicsPath(Table<O> path, ForeignKey<O, TopicsRecord> childPath, InverseForeignKey<O, TopicsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TopicsPath(Name alias, Table<TopicsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TopicsPath as(String alias) {
            return new TopicsPath(DSL.name(alias), this);
        }

        @Override
        public TopicsPath as(Name alias) {
            return new TopicsPath(alias, this);
        }

        @Override
        public TopicsPath as(Table<?> alias) {
            return new TopicsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TopicsRecord, Integer> getIdentity() {
        return (Identity<TopicsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TopicsRecord> getPrimaryKey() {
        return Keys.TOPICS_PKEY;
    }

    @Override
    public List<ForeignKey<TopicsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TOPICS__TOPICS_USER_ID_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.TOPICS__TOPICS_USER_ID_FKEY, null);

        return _users;
    }

    private transient MessagesPath _messages;

    /**
     * Get the implicit to-many join path to the <code>public.messages</code>
     * table
     */
    public MessagesPath messages() {
        if (_messages == null)
            _messages = new MessagesPath(this, null, Keys.MESSAGES__MESSAGES_TOPIC_ID_FKEY.getInverseKey());

        return _messages;
    }

    @Override
    public Topics as(String alias) {
        return new Topics(DSL.name(alias), this);
    }

    @Override
    public Topics as(Name alias) {
        return new Topics(alias, this);
    }

    @Override
    public Topics as(Table<?> alias) {
        return new Topics(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Topics rename(String name) {
        return new Topics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Topics rename(Name name) {
        return new Topics(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Topics rename(Table<?> name) {
        return new Topics(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topics where(Condition condition) {
        return new Topics(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topics where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topics where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topics where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Topics where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Topics where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Topics where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Topics where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topics whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topics whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
