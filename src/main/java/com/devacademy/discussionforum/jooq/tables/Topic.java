/*
 * This file is generated by jOOQ.
 */
package com.devacademy.discussionforum.jooq.tables;


import com.devacademy.discussionforum.jooq.Keys;
import com.devacademy.discussionforum.jooq.Public;
import com.devacademy.discussionforum.jooq.tables.ForumUser.ForumUserPath;
import com.devacademy.discussionforum.jooq.tables.Message.MessagePath;
import com.devacademy.discussionforum.jooq.tables.records.TopicRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Topic extends TableImpl<TopicRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.topic</code>
     */
    public static final Topic TOPIC = new Topic();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TopicRecord> getRecordType() {
        return TopicRecord.class;
    }

    /**
     * The column <code>public.topic.id</code>.
     */
    public final TableField<TopicRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.topic.user_id</code>.
     */
    public final TableField<TopicRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.topic.name</code>.
     */
    public final TableField<TopicRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(75).nullable(false), this, "");

    /**
     * The column <code>public.topic.created_at</code>.
     */
    public final TableField<TopicRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.topic.updated_at</code>.
     */
    public final TableField<TopicRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Topic(Name alias, Table<TopicRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Topic(Name alias, Table<TopicRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.topic</code> table reference
     */
    public Topic(String alias) {
        this(DSL.name(alias), TOPIC);
    }

    /**
     * Create an aliased <code>public.topic</code> table reference
     */
    public Topic(Name alias) {
        this(alias, TOPIC);
    }

    /**
     * Create a <code>public.topic</code> table reference
     */
    public Topic() {
        this(DSL.name("topic"), null);
    }

    public <O extends Record> Topic(Table<O> path, ForeignKey<O, TopicRecord> childPath, InverseForeignKey<O, TopicRecord> parentPath) {
        super(path, childPath, parentPath, TOPIC);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TopicPath extends Topic implements Path<TopicRecord> {
        public <O extends Record> TopicPath(Table<O> path, ForeignKey<O, TopicRecord> childPath, InverseForeignKey<O, TopicRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TopicPath(Name alias, Table<TopicRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TopicPath as(String alias) {
            return new TopicPath(DSL.name(alias), this);
        }

        @Override
        public TopicPath as(Name alias) {
            return new TopicPath(alias, this);
        }

        @Override
        public TopicPath as(Table<?> alias) {
            return new TopicPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TopicRecord, Integer> getIdentity() {
        return (Identity<TopicRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TopicRecord> getPrimaryKey() {
        return Keys.TOPIC_PKEY;
    }

    @Override
    public List<ForeignKey<TopicRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TOPIC__TOPIC_USER_ID_FKEY);
    }

    private transient ForumUserPath _forumUser;

    /**
     * Get the implicit join path to the <code>public.forum_user</code> table.
     */
    public ForumUserPath forumUser() {
        if (_forumUser == null)
            _forumUser = new ForumUserPath(this, Keys.TOPIC__TOPIC_USER_ID_FKEY, null);

        return _forumUser;
    }

    private transient MessagePath _message;

    /**
     * Get the implicit to-many join path to the <code>public.message</code>
     * table
     */
    public MessagePath message() {
        if (_message == null)
            _message = new MessagePath(this, null, Keys.MESSAGE__MESSAGE_TOPIC_ID_FKEY.getInverseKey());

        return _message;
    }

    @Override
    public Topic as(String alias) {
        return new Topic(DSL.name(alias), this);
    }

    @Override
    public Topic as(Name alias) {
        return new Topic(alias, this);
    }

    @Override
    public Topic as(Table<?> alias) {
        return new Topic(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Topic rename(String name) {
        return new Topic(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Topic rename(Name name) {
        return new Topic(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Topic rename(Table<?> name) {
        return new Topic(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topic where(Condition condition) {
        return new Topic(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topic where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topic where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topic where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Topic where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Topic where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Topic where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Topic where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topic whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Topic whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
