/*
 * This file is generated by jOOQ.
 */
package com.devacademy.discussionforum.jooq.tables;


import com.devacademy.discussionforum.jooq.Keys;
import com.devacademy.discussionforum.jooq.Public;
import com.devacademy.discussionforum.jooq.tables.ForumUser.ForumUserPath;
import com.devacademy.discussionforum.jooq.tables.Topic.TopicPath;
import com.devacademy.discussionforum.jooq.tables.records.MessageRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Message extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.message</code>
     */
    public static final Message MESSAGE = new Message();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>public.message.id</code>.
     */
    public final TableField<MessageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.message.user_id</code>.
     */
    public final TableField<MessageRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.message.topic_id</code>.
     */
    public final TableField<MessageRecord, Integer> TOPIC_ID = createField(DSL.name("topic_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.message.message</code>.
     */
    public final TableField<MessageRecord, String> MESSAGE_ = createField(DSL.name("message"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>public.message.up_votes</code>.
     */
    public final TableField<MessageRecord, Integer> UP_VOTES = createField(DSL.name("up_votes"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.message.created_at</code>.
     */
    public final TableField<MessageRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.message.updated_at</code>.
     */
    public final TableField<MessageRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Message(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Message(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.message</code> table reference
     */
    public Message(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>public.message</code> table reference
     */
    public Message(Name alias) {
        this(alias, MESSAGE);
    }

    /**
     * Create a <code>public.message</code> table reference
     */
    public Message() {
        this(DSL.name("message"), null);
    }

    public <O extends Record> Message(Table<O> path, ForeignKey<O, MessageRecord> childPath, InverseForeignKey<O, MessageRecord> parentPath) {
        super(path, childPath, parentPath, MESSAGE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class MessagePath extends Message implements Path<MessageRecord> {
        public <O extends Record> MessagePath(Table<O> path, ForeignKey<O, MessageRecord> childPath, InverseForeignKey<O, MessageRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private MessagePath(Name alias, Table<MessageRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public MessagePath as(String alias) {
            return new MessagePath(DSL.name(alias), this);
        }

        @Override
        public MessagePath as(Name alias) {
            return new MessagePath(alias, this);
        }

        @Override
        public MessagePath as(Table<?> alias) {
            return new MessagePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<MessageRecord, Integer> getIdentity() {
        return (Identity<MessageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Keys.MESSAGE_PKEY;
    }

    @Override
    public List<ForeignKey<MessageRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MESSAGE__MESSAGE_USER_ID_FKEY, Keys.MESSAGE__MESSAGE_TOPIC_ID_FKEY);
    }

    private transient ForumUserPath _forumUser;

    /**
     * Get the implicit join path to the <code>public.forum_user</code> table.
     */
    public ForumUserPath forumUser() {
        if (_forumUser == null)
            _forumUser = new ForumUserPath(this, Keys.MESSAGE__MESSAGE_USER_ID_FKEY, null);

        return _forumUser;
    }

    private transient TopicPath _topic;

    /**
     * Get the implicit join path to the <code>public.topic</code> table.
     */
    public TopicPath topic() {
        if (_topic == null)
            _topic = new TopicPath(this, Keys.MESSAGE__MESSAGE_TOPIC_ID_FKEY, null);

        return _topic;
    }

    @Override
    public Message as(String alias) {
        return new Message(DSL.name(alias), this);
    }

    @Override
    public Message as(Name alias) {
        return new Message(alias, this);
    }

    @Override
    public Message as(Table<?> alias) {
        return new Message(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(String name) {
        return new Message(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Name name) {
        return new Message(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Table<?> name) {
        return new Message(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message where(Condition condition) {
        return new Message(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Message where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Message where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Message where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Message where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Message whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
